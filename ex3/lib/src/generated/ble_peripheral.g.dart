// Autogenerated from Pigeon (v17.3.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

/// Enums
enum BondState {
  bonding,
  bonded,
  none,
}

/// Models
class BleService {
  BleService({
    required this.uuid,
    required this.primary,
    required this.characteristics,
  });

  String uuid;

  bool primary;

  List<BleCharacteristic?> characteristics;

  Object encode() {
    return <Object?>[
      uuid,
      primary,
      characteristics,
    ];
  }

  static BleService decode(Object result) {
    result as List<Object?>;
    return BleService(
      uuid: result[0]! as String,
      primary: result[1]! as bool,
      characteristics: (result[2] as List<Object?>?)!.cast<BleCharacteristic?>(),
    );
  }
}

class BleCharacteristic {
  BleCharacteristic({
    required this.uuid,
    required this.properties,
    required this.permissions,
    this.descriptors,
    this.value,
  });

  String uuid;

  List<int?> properties;

  List<int?> permissions;

  List<BleDescriptor?>? descriptors;

  Uint8List? value;

  Object encode() {
    return <Object?>[
      uuid,
      properties,
      permissions,
      descriptors,
      value,
    ];
  }

  static BleCharacteristic decode(Object result) {
    result as List<Object?>;
    return BleCharacteristic(
      uuid: result[0]! as String,
      properties: (result[1] as List<Object?>?)!.cast<int?>(),
      permissions: (result[2] as List<Object?>?)!.cast<int?>(),
      descriptors: (result[3] as List<Object?>?)?.cast<BleDescriptor?>(),
      value: result[4] as Uint8List?,
    );
  }
}

class BleDescriptor {
  BleDescriptor({
    required this.uuid,
    this.value,
    this.permissions,
  });

  String uuid;

  Uint8List? value;

  List<int?>? permissions;

  Object encode() {
    return <Object?>[
      uuid,
      value,
      permissions,
    ];
  }

  static BleDescriptor decode(Object result) {
    result as List<Object?>;
    return BleDescriptor(
      uuid: result[0]! as String,
      value: result[1] as Uint8List?,
      permissions: (result[2] as List<Object?>?)?.cast<int?>(),
    );
  }
}

class ReadRequestResult {
  ReadRequestResult({
    required this.value,
    this.offset,
    this.status,
  });

  Uint8List value;

  int? offset;

  int? status;

  Object encode() {
    return <Object?>[
      value,
      offset,
      status,
    ];
  }

  static ReadRequestResult decode(Object result) {
    result as List<Object?>;
    return ReadRequestResult(
      value: result[0]! as Uint8List,
      offset: result[1] as int?,
      status: result[2] as int?,
    );
  }
}

class WriteRequestResult {
  WriteRequestResult({
    this.value,
    this.offset,
    this.status,
  });

  Uint8List? value;

  int? offset;

  int? status;

  Object encode() {
    return <Object?>[
      value,
      offset,
      status,
    ];
  }

  static WriteRequestResult decode(Object result) {
    result as List<Object?>;
    return WriteRequestResult(
      value: result[0] as Uint8List?,
      offset: result[1] as int?,
      status: result[2] as int?,
    );
  }
}

class ManufacturerData {
  ManufacturerData({
    required this.manufacturerId,
    required this.data,
  });

  int manufacturerId;

  Uint8List data;

  Object encode() {
    return <Object?>[
      manufacturerId,
      data,
    ];
  }

  static ManufacturerData decode(Object result) {
    result as List<Object?>;
    return ManufacturerData(
      manufacturerId: result[0]! as int,
      data: result[1]! as Uint8List,
    );
  }
}

class _BlePeripheralChannelCodec extends StandardMessageCodec {
  const _BlePeripheralChannelCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is BleCharacteristic) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is BleDescriptor) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is BleService) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is ManufacturerData) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return BleCharacteristic.decode(readValue(buffer)!);
      case 129: 
        return BleDescriptor.decode(readValue(buffer)!);
      case 130: 
        return BleService.decode(readValue(buffer)!);
      case 131: 
        return ManufacturerData.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

/// Flutter -> Native
class BlePeripheralChannel {
  /// Constructor for [BlePeripheralChannel].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  BlePeripheralChannel({BinaryMessenger? binaryMessenger})
      : __pigeon_binaryMessenger = binaryMessenger;
  final BinaryMessenger? __pigeon_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _BlePeripheralChannelCodec();

  Future<void> initialize() async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.ble_peripheral.BlePeripheralChannel.initialize';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool?> isAdvertising() async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.ble_peripheral.BlePeripheralChannel.isAdvertising';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as bool?);
    }
  }

  Future<bool> isSupported() async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.ble_peripheral.BlePeripheralChannel.isSupported';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as bool?)!;
    }
  }

  Future<void> stopAdvertising() async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.ble_peripheral.BlePeripheralChannel.stopAdvertising';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> askBlePermission() async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.ble_peripheral.BlePeripheralChannel.askBlePermission';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as bool?)!;
    }
  }

  Future<void> addService(BleService service) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.ble_peripheral.BlePeripheralChannel.addService';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[service]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> removeService(String serviceId) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.ble_peripheral.BlePeripheralChannel.removeService';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[serviceId]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> clearServices() async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.ble_peripheral.BlePeripheralChannel.clearServices';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<List<String?>> getServices() async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.ble_peripheral.BlePeripheralChannel.getServices';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as List<Object?>?)!.cast<String?>();
    }
  }

  Future<void> startAdvertising(List<String?> services, String? localName, int? timeout, ManufacturerData? manufacturerData, bool addManufacturerDataInScanResponse) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.ble_peripheral.BlePeripheralChannel.startAdvertising';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[services, localName, timeout, manufacturerData, addManufacturerDataInScanResponse]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> updateCharacteristic(String characteristicId, Uint8List value, String? deviceId) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.ble_peripheral.BlePeripheralChannel.updateCharacteristic';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[characteristicId, value, deviceId]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }
}

class _BleCallbackCodec extends StandardMessageCodec {
  const _BleCallbackCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is ReadRequestResult) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is WriteRequestResult) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return ReadRequestResult.decode(readValue(buffer)!);
      case 129: 
        return WriteRequestResult.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

/// Native -> Flutter
abstract class BleCallback {
  static const MessageCodec<Object?> pigeonChannelCodec = _BleCallbackCodec();

  ReadRequestResult? onReadRequest(String deviceId, String characteristicId, int offset, Uint8List? value);

  WriteRequestResult? onWriteRequest(String deviceId, String characteristicId, int offset, Uint8List? value);

  void onCharacteristicSubscriptionChange(String deviceId, String characteristicId, bool isSubscribed);

  void onAdvertisingStatusUpdate(bool advertising, String? error);

  void onBleStateChange(bool state);

  void onServiceAdded(String serviceId, String? error);

  void onMtuChange(String deviceId, int mtu);

  void onConnectionStateChange(String deviceId, bool connected);

  void onBondStateChange(String deviceId, BondState bondState);

  static void setup(BleCallback? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.ble_peripheral.BleCallback.onReadRequest', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.ble_peripheral.BleCallback.onReadRequest was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_deviceId = (args[0] as String?);
          assert(arg_deviceId != null,
              'Argument for dev.flutter.pigeon.ble_peripheral.BleCallback.onReadRequest was null, expected non-null String.');
          final String? arg_characteristicId = (args[1] as String?);
          assert(arg_characteristicId != null,
              'Argument for dev.flutter.pigeon.ble_peripheral.BleCallback.onReadRequest was null, expected non-null String.');
          final int? arg_offset = (args[2] as int?);
          assert(arg_offset != null,
              'Argument for dev.flutter.pigeon.ble_peripheral.BleCallback.onReadRequest was null, expected non-null int.');
          final Uint8List? arg_value = (args[3] as Uint8List?);
          try {
            final ReadRequestResult? output = api.onReadRequest(arg_deviceId!, arg_characteristicId!, arg_offset!, arg_value);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.ble_peripheral.BleCallback.onWriteRequest', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.ble_peripheral.BleCallback.onWriteRequest was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_deviceId = (args[0] as String?);
          assert(arg_deviceId != null,
              'Argument for dev.flutter.pigeon.ble_peripheral.BleCallback.onWriteRequest was null, expected non-null String.');
          final String? arg_characteristicId = (args[1] as String?);
          assert(arg_characteristicId != null,
              'Argument for dev.flutter.pigeon.ble_peripheral.BleCallback.onWriteRequest was null, expected non-null String.');
          final int? arg_offset = (args[2] as int?);
          assert(arg_offset != null,
              'Argument for dev.flutter.pigeon.ble_peripheral.BleCallback.onWriteRequest was null, expected non-null int.');
          final Uint8List? arg_value = (args[3] as Uint8List?);
          try {
            final WriteRequestResult? output = api.onWriteRequest(arg_deviceId!, arg_characteristicId!, arg_offset!, arg_value);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.ble_peripheral.BleCallback.onCharacteristicSubscriptionChange', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.ble_peripheral.BleCallback.onCharacteristicSubscriptionChange was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_deviceId = (args[0] as String?);
          assert(arg_deviceId != null,
              'Argument for dev.flutter.pigeon.ble_peripheral.BleCallback.onCharacteristicSubscriptionChange was null, expected non-null String.');
          final String? arg_characteristicId = (args[1] as String?);
          assert(arg_characteristicId != null,
              'Argument for dev.flutter.pigeon.ble_peripheral.BleCallback.onCharacteristicSubscriptionChange was null, expected non-null String.');
          final bool? arg_isSubscribed = (args[2] as bool?);
          assert(arg_isSubscribed != null,
              'Argument for dev.flutter.pigeon.ble_peripheral.BleCallback.onCharacteristicSubscriptionChange was null, expected non-null bool.');
          try {
            api.onCharacteristicSubscriptionChange(arg_deviceId!, arg_characteristicId!, arg_isSubscribed!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.ble_peripheral.BleCallback.onAdvertisingStatusUpdate', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.ble_peripheral.BleCallback.onAdvertisingStatusUpdate was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final bool? arg_advertising = (args[0] as bool?);
          assert(arg_advertising != null,
              'Argument for dev.flutter.pigeon.ble_peripheral.BleCallback.onAdvertisingStatusUpdate was null, expected non-null bool.');
          final String? arg_error = (args[1] as String?);
          try {
            api.onAdvertisingStatusUpdate(arg_advertising!, arg_error);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.ble_peripheral.BleCallback.onBleStateChange', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.ble_peripheral.BleCallback.onBleStateChange was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final bool? arg_state = (args[0] as bool?);
          assert(arg_state != null,
              'Argument for dev.flutter.pigeon.ble_peripheral.BleCallback.onBleStateChange was null, expected non-null bool.');
          try {
            api.onBleStateChange(arg_state!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.ble_peripheral.BleCallback.onServiceAdded', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.ble_peripheral.BleCallback.onServiceAdded was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_serviceId = (args[0] as String?);
          assert(arg_serviceId != null,
              'Argument for dev.flutter.pigeon.ble_peripheral.BleCallback.onServiceAdded was null, expected non-null String.');
          final String? arg_error = (args[1] as String?);
          try {
            api.onServiceAdded(arg_serviceId!, arg_error);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.ble_peripheral.BleCallback.onMtuChange', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.ble_peripheral.BleCallback.onMtuChange was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_deviceId = (args[0] as String?);
          assert(arg_deviceId != null,
              'Argument for dev.flutter.pigeon.ble_peripheral.BleCallback.onMtuChange was null, expected non-null String.');
          final int? arg_mtu = (args[1] as int?);
          assert(arg_mtu != null,
              'Argument for dev.flutter.pigeon.ble_peripheral.BleCallback.onMtuChange was null, expected non-null int.');
          try {
            api.onMtuChange(arg_deviceId!, arg_mtu!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.ble_peripheral.BleCallback.onConnectionStateChange', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.ble_peripheral.BleCallback.onConnectionStateChange was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_deviceId = (args[0] as String?);
          assert(arg_deviceId != null,
              'Argument for dev.flutter.pigeon.ble_peripheral.BleCallback.onConnectionStateChange was null, expected non-null String.');
          final bool? arg_connected = (args[1] as bool?);
          assert(arg_connected != null,
              'Argument for dev.flutter.pigeon.ble_peripheral.BleCallback.onConnectionStateChange was null, expected non-null bool.');
          try {
            api.onConnectionStateChange(arg_deviceId!, arg_connected!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.ble_peripheral.BleCallback.onBondStateChange', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.ble_peripheral.BleCallback.onBondStateChange was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_deviceId = (args[0] as String?);
          assert(arg_deviceId != null,
              'Argument for dev.flutter.pigeon.ble_peripheral.BleCallback.onBondStateChange was null, expected non-null String.');
          final BondState? arg_bondState = args[1] == null ? null : BondState.values[args[1]! as int];
          assert(arg_bondState != null,
              'Argument for dev.flutter.pigeon.ble_peripheral.BleCallback.onBondStateChange was null, expected non-null BondState.');
          try {
            api.onBondStateChange(arg_deviceId!, arg_bondState!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}

// Autogenerated from Pigeon (v12.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

enum PlacesFilterType: Int {
  /// Geocoding results, as opposed to business results.
  case geocode = 0
  /// Geocoding results with a precise address.
  case address = 1
  /// Business results.
  case establishment = 2
  /// * Results that match the following types:
  /// * "locality",
  /// * "sublocality"
  /// * "postal_code",
  /// * "country",
  /// * "administrative_area_level_1",
  /// * "administrative_area_level_2"
  case region = 3
  /// * Results that match the following types:
  /// * "locality",
  /// * "administrative_area_level_3"
  case city = 4
}

enum PlaceFields: Int {
  case formattedAddress = 0
  case addressComponents = 1
  case businessStatus = 2
  case placeID = 3
  case coordinate = 4
  case name = 5
  case photos = 6
  case plusCode = 7
  case types = 8
  case viewport = 9
}

enum PlacesBusinessStatus: Int {
  /// The business status is not known
  case unknown = 0
  /// The business is operational
  case operational = 1
  /// The business is closed temporarily
  case closedTemporarily = 2
  /// The business is closed permanently
  case closedPermanently = 3
}

/// Generated class from Pigeon that represents data sent in messages.
struct Prediction {
  var attributed: PredictionAttributed
  var placeID: String
  var rawTypes: [String?]
  var distanceMeters: Double? = nil

  static func fromList(_ list: [Any?]) -> Prediction? {
    let attributed = PredictionAttributed.fromList(list[0] as! [Any?])!
    let placeID = list[1] as! String
    let rawTypes = list[2] as! [String?]
    let distanceMeters: Double? = nilOrValue(list[3])

    return Prediction(
      attributed: attributed,
      placeID: placeID,
      rawTypes: rawTypes,
      distanceMeters: distanceMeters
    )
  }
  func toList() -> [Any?] {
    return [
      attributed.toList(),
      placeID,
      rawTypes,
      distanceMeters,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PredictionAttributed {
  var fullText: String
  var primaryText: String
  var secondaryText: String? = nil

  static func fromList(_ list: [Any?]) -> PredictionAttributed? {
    let fullText = list[0] as! String
    let primaryText = list[1] as! String
    let secondaryText: String? = nilOrValue(list[2])

    return PredictionAttributed(
      fullText: fullText,
      primaryText: primaryText,
      secondaryText: secondaryText
    )
  }
  func toList() -> [Any?] {
    return [
      fullText,
      primaryText,
      secondaryText,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PlaceItem {
  var formattedAddress: String? = nil
  var rawAddressComponents: [AddressComponent?]
  var businessStatus: PlacesBusinessStatus
  var placeId: String? = nil
  var coordinate: PlaceCoordinate? = nil
  var name: String? = nil
  var plusCode: PlacePlusCode? = nil
  var rawTypes: [String?]? = nil
  var viewport: PlaceViewport? = nil

  static func fromList(_ list: [Any?]) -> PlaceItem? {
    let formattedAddress: String? = nilOrValue(list[0])
    let rawAddressComponents = list[1] as! [AddressComponent?]
    let businessStatus = PlacesBusinessStatus(rawValue: list[2] as! Int)!
    let placeId: String? = nilOrValue(list[3])
    var coordinate: PlaceCoordinate? = nil
    if let coordinateList: [Any?] = nilOrValue(list[4]) {
      coordinate = PlaceCoordinate.fromList(coordinateList)
    }
    let name: String? = nilOrValue(list[5])
    var plusCode: PlacePlusCode? = nil
    if let plusCodeList: [Any?] = nilOrValue(list[6]) {
      plusCode = PlacePlusCode.fromList(plusCodeList)
    }
    let rawTypes: [String?]? = nilOrValue(list[7])
    var viewport: PlaceViewport? = nil
    if let viewportList: [Any?] = nilOrValue(list[8]) {
      viewport = PlaceViewport.fromList(viewportList)
    }

    return PlaceItem(
      formattedAddress: formattedAddress,
      rawAddressComponents: rawAddressComponents,
      businessStatus: businessStatus,
      placeId: placeId,
      coordinate: coordinate,
      name: name,
      plusCode: plusCode,
      rawTypes: rawTypes,
      viewport: viewport
    )
  }
  func toList() -> [Any?] {
    return [
      formattedAddress,
      rawAddressComponents,
      businessStatus.rawValue,
      placeId,
      coordinate?.toList(),
      name,
      plusCode?.toList(),
      rawTypes,
      viewport?.toList(),
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct AddressComponent {
  var name: String
  var shortName: String? = nil
  var rawTypes: [String?]

  static func fromList(_ list: [Any?]) -> AddressComponent? {
    let name = list[0] as! String
    let shortName: String? = nilOrValue(list[1])
    let rawTypes = list[2] as! [String?]

    return AddressComponent(
      name: name,
      shortName: shortName,
      rawTypes: rawTypes
    )
  }
  func toList() -> [Any?] {
    return [
      name,
      shortName,
      rawTypes,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PlaceCoordinate {
  var latitude: Double
  var longitude: Double

  static func fromList(_ list: [Any?]) -> PlaceCoordinate? {
    let latitude = list[0] as! Double
    let longitude = list[1] as! Double

    return PlaceCoordinate(
      latitude: latitude,
      longitude: longitude
    )
  }
  func toList() -> [Any?] {
    return [
      latitude,
      longitude,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PlacePlusCode {
  var globalCode: String
  var compoundCode: String? = nil

  static func fromList(_ list: [Any?]) -> PlacePlusCode? {
    let globalCode = list[0] as! String
    let compoundCode: String? = nilOrValue(list[1])

    return PlacePlusCode(
      globalCode: globalCode,
      compoundCode: compoundCode
    )
  }
  func toList() -> [Any?] {
    return [
      globalCode,
      compoundCode,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PlaceViewport {
  var northEast: PlaceCoordinate
  var southWest: PlaceCoordinate
  var valid: Bool

  static func fromList(_ list: [Any?]) -> PlaceViewport? {
    let northEast = PlaceCoordinate.fromList(list[0] as! [Any?])!
    let southWest = PlaceCoordinate.fromList(list[1] as! [Any?])!
    let valid = list[2] as! Bool

    return PlaceViewport(
      northEast: northEast,
      southWest: southWest,
      valid: valid
    )
  }
  func toList() -> [Any?] {
    return [
      northEast.toList(),
      southWest.toList(),
      valid,
    ]
  }
}

private class GmsPlacesApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return AddressComponent.fromList(self.readValue() as! [Any?])
      case 129:
        return PlaceCoordinate.fromList(self.readValue() as! [Any?])
      case 130:
        return PlaceCoordinate.fromList(self.readValue() as! [Any?])
      case 131:
        return PlaceItem.fromList(self.readValue() as! [Any?])
      case 132:
        return PlacePlusCode.fromList(self.readValue() as! [Any?])
      case 133:
        return PlaceViewport.fromList(self.readValue() as! [Any?])
      case 134:
        return Prediction.fromList(self.readValue() as! [Any?])
      case 135:
        return PredictionAttributed.fromList(self.readValue() as! [Any?])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class GmsPlacesApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? AddressComponent {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? PlaceCoordinate {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? PlaceCoordinate {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? PlaceItem {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? PlacePlusCode {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else if let value = value as? PlaceViewport {
      super.writeByte(133)
      super.writeValue(value.toList())
    } else if let value = value as? Prediction {
      super.writeByte(134)
      super.writeValue(value.toList())
    } else if let value = value as? PredictionAttributed {
      super.writeByte(135)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class GmsPlacesApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return GmsPlacesApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return GmsPlacesApiCodecWriter(data: data)
  }
}

class GmsPlacesApiCodec: FlutterStandardMessageCodec {
  static let shared = GmsPlacesApiCodec(readerWriter: GmsPlacesApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol GmsPlacesApi {
  func ensureInitialized() throws
  func autocomplete(fromQuery: String, filter: PlacesFilterType, completion: @escaping (Result<[Prediction], Error>) -> Void)
  func getDetailById(placeId: String, fields: [PlaceFields], completion: @escaping (Result<PlaceItem?, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class GmsPlacesApiSetup {
  /// The codec used by GmsPlacesApi.
  static var codec: FlutterStandardMessageCodec { GmsPlacesApiCodec.shared }
  /// Sets up an instance of `GmsPlacesApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: GmsPlacesApi?) {
    let ensureInitializedChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.gms_places_api.GmsPlacesApi.ensureInitialized", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      ensureInitializedChannel.setMessageHandler { _, reply in
        do {
          try api.ensureInitialized()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      ensureInitializedChannel.setMessageHandler(nil)
    }
    let autocompleteChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.gms_places_api.GmsPlacesApi.autocomplete", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      autocompleteChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let fromQueryArg = args[0] as! String
        let filterArg = PlacesFilterType(rawValue: args[1] as! Int)!
        api.autocomplete(fromQuery: fromQueryArg, filter: filterArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      autocompleteChannel.setMessageHandler(nil)
    }
    let getDetailByIdChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.gms_places_api.GmsPlacesApi.getDetailById", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getDetailByIdChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let placeIdArg = args[0] as! String
        let fieldsArg = args[1] as! [PlaceFields]
        api.getDetailById(placeId: placeIdArg, fields: fieldsArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getDetailByIdChannel.setMessageHandler(nil)
    }
  }
}

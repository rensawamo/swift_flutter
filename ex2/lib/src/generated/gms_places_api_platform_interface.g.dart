// Autogenerated from Pigeon (v12.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';
List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

enum PlacesFilterType {
  /// Geocoding results, as opposed to business results.
  geocode,
  /// Geocoding results with a precise address.
  address,
  /// Business results.
  establishment,
  /// * Results that match the following types:
  /// * "locality",
  /// * "sublocality"
  /// * "postal_code",
  /// * "country",
  /// * "administrative_area_level_1",
  /// * "administrative_area_level_2"
  region,
  /// * Results that match the following types:
  /// * "locality",
  /// * "administrative_area_level_3"
  city,
}

enum PlaceFields {
  formattedAddress,
  addressComponents,
  businessStatus,
  placeID,
  coordinate,
  name,
  photos,
  plusCode,
  types,
  viewport,
}

enum PlacesBusinessStatus {
  /// The business status is not known
  unknown,
  /// The business is operational
  operational,
  /// The business is closed temporarily
  closedTemporarily,
  /// The business is closed permanently
  closedPermanently,
}

class Prediction {
  Prediction({
    required this.attributed,
    required this.placeID,
    required this.rawTypes,
    this.distanceMeters,
  });

  PredictionAttributed attributed;

  String placeID;

  List<String?> rawTypes;

  double? distanceMeters;

  Object encode() {
    return <Object?>[
      attributed.encode(),
      placeID,
      rawTypes,
      distanceMeters,
    ];
  }

  static Prediction decode(Object result) {
    result as List<Object?>;
    return Prediction(
      attributed: PredictionAttributed.decode(result[0]! as List<Object?>),
      placeID: result[1]! as String,
      rawTypes: (result[2] as List<Object?>?)!.cast<String?>(),
      distanceMeters: result[3] as double?,
    );
  }
}

class PredictionAttributed {
  PredictionAttributed({
    required this.fullText,
    required this.primaryText,
    this.secondaryText,
  });

  String fullText;

  String primaryText;

  String? secondaryText;

  Object encode() {
    return <Object?>[
      fullText,
      primaryText,
      secondaryText,
    ];
  }

  static PredictionAttributed decode(Object result) {
    result as List<Object?>;
    return PredictionAttributed(
      fullText: result[0]! as String,
      primaryText: result[1]! as String,
      secondaryText: result[2] as String?,
    );
  }
}

class PlaceItem {
  PlaceItem({
    this.formattedAddress,
    required this.rawAddressComponents,
    required this.businessStatus,
    this.placeId,
    this.coordinate,
    this.name,
    this.plusCode,
    this.rawTypes,
    this.viewport,
  });

  String? formattedAddress;

  List<AddressComponent?> rawAddressComponents;

  PlacesBusinessStatus businessStatus;

  String? placeId;

  PlaceCoordinate? coordinate;

  String? name;

  PlacePlusCode? plusCode;

  List<String?>? rawTypes;

  PlaceViewport? viewport;

  Object encode() {
    return <Object?>[
      formattedAddress,
      rawAddressComponents,
      businessStatus.index,
      placeId,
      coordinate?.encode(),
      name,
      plusCode?.encode(),
      rawTypes,
      viewport?.encode(),
    ];
  }

  static PlaceItem decode(Object result) {
    result as List<Object?>;
    return PlaceItem(
      formattedAddress: result[0] as String?,
      rawAddressComponents: (result[1] as List<Object?>?)!.cast<AddressComponent?>(),
      businessStatus: PlacesBusinessStatus.values[result[2]! as int],
      placeId: result[3] as String?,
      coordinate: result[4] != null
          ? PlaceCoordinate.decode(result[4]! as List<Object?>)
          : null,
      name: result[5] as String?,
      plusCode: result[6] != null
          ? PlacePlusCode.decode(result[6]! as List<Object?>)
          : null,
      rawTypes: (result[7] as List<Object?>?)?.cast<String?>(),
      viewport: result[8] != null
          ? PlaceViewport.decode(result[8]! as List<Object?>)
          : null,
    );
  }
}

class AddressComponent {
  AddressComponent({
    required this.name,
    this.shortName,
    required this.rawTypes,
  });

  String name;

  String? shortName;

  List<String?> rawTypes;

  Object encode() {
    return <Object?>[
      name,
      shortName,
      rawTypes,
    ];
  }

  static AddressComponent decode(Object result) {
    result as List<Object?>;
    return AddressComponent(
      name: result[0]! as String,
      shortName: result[1] as String?,
      rawTypes: (result[2] as List<Object?>?)!.cast<String?>(),
    );
  }
}

class PlaceCoordinate {
  PlaceCoordinate({
    required this.latitude,
    required this.longitude,
  });

  double latitude;

  double longitude;

  Object encode() {
    return <Object?>[
      latitude,
      longitude,
    ];
  }

  static PlaceCoordinate decode(Object result) {
    result as List<Object?>;
    return PlaceCoordinate(
      latitude: result[0]! as double,
      longitude: result[1]! as double,
    );
  }
}

class PlacePlusCode {
  PlacePlusCode({
    required this.globalCode,
    this.compoundCode,
  });

  String globalCode;

  String? compoundCode;

  Object encode() {
    return <Object?>[
      globalCode,
      compoundCode,
    ];
  }

  static PlacePlusCode decode(Object result) {
    result as List<Object?>;
    return PlacePlusCode(
      globalCode: result[0]! as String,
      compoundCode: result[1] as String?,
    );
  }
}

class PlaceViewport {
  PlaceViewport({
    required this.northEast,
    required this.southWest,
    required this.valid,
  });

  PlaceCoordinate northEast;

  PlaceCoordinate southWest;

  bool valid;

  Object encode() {
    return <Object?>[
      northEast.encode(),
      southWest.encode(),
      valid,
    ];
  }

  static PlaceViewport decode(Object result) {
    result as List<Object?>;
    return PlaceViewport(
      northEast: PlaceCoordinate.decode(result[0]! as List<Object?>),
      southWest: PlaceCoordinate.decode(result[1]! as List<Object?>),
      valid: result[2]! as bool,
    );
  }
}

class _GmsPlacesApiCodec extends StandardMessageCodec {
  const _GmsPlacesApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is AddressComponent) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is PlaceCoordinate) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is PlaceCoordinate) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is PlaceItem) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is PlacePlusCode) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is PlaceViewport) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is Prediction) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is PredictionAttributed) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return AddressComponent.decode(readValue(buffer)!);
      case 129: 
        return PlaceCoordinate.decode(readValue(buffer)!);
      case 130: 
        return PlaceCoordinate.decode(readValue(buffer)!);
      case 131: 
        return PlaceItem.decode(readValue(buffer)!);
      case 132: 
        return PlacePlusCode.decode(readValue(buffer)!);
      case 133: 
        return PlaceViewport.decode(readValue(buffer)!);
      case 134: 
        return Prediction.decode(readValue(buffer)!);
      case 135: 
        return PredictionAttributed.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class GmsPlacesApi {
  /// Constructor for [GmsPlacesApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  GmsPlacesApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _GmsPlacesApiCodec();

  Future<void> ensureInitialized() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.gms_places_api.GmsPlacesApi.ensureInitialized', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<List<Prediction?>> autocomplete(String arg_fromQuery, PlacesFilterType arg_filter) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.gms_places_api.GmsPlacesApi.autocomplete', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_fromQuery, arg_filter.index]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as List<Object?>?)!.cast<Prediction?>();
    }
  }

  Future<PlaceItem?> getDetailById(String arg_placeId, List<PlaceFields?> arg_fields) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.gms_places_api.GmsPlacesApi.getDetailById', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_placeId, arg_fields]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return (replyList[0] as PlaceItem?);
    }
  }
}
